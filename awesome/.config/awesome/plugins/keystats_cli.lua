#!/usr/bin/env lua
-- keystats_cli.lua
-- CLI to view rankings and details from AwesomeWM key usage stats
-- Reads ~/.config/awesome/keystats_db.lua generated by plugins/keystats.lua

local function get_config_dir()
  local home = os.getenv("HOME") or "~"
  return home .. "/.config/awesome/"
end

local function load_db(path)
  local f = io.open(path, "r")
  if not f then return {} end
  f:close()
  local ok, data = pcall(dofile, path)
  if ok and type(data) == "table" then return data end
  return {}
end

local function usage()
  print([[Usage: keystats_cli.lua [--db <path>] <command> [options]

Commands:
  top [N]                 Show top N keybinds by count (default N=20)
  underused [N]          Show N least used keybinds by count
  recent [N]             Show N most recently used keybinds
  stale [N]              Show N least recently used keybinds (including never used)
  by-group [N]           Aggregate by group, show top N groups by total count
  by-mods [N]            Aggregate by modifiers, show top N modifier combos
  info <mods>|<key>      Show all records matching mods+key (e.g., "Mod4+Shift|h")
  search <substr>        Search description/group/key by substring
  concentration [K]      Show share of total usage accounted for by top K (default K=10)
  notify-top [N]         Ask running Awesome to display a desktop notification for top N
  export [json]          Print entire DB in JSON (default) or Lua table form

Options (filters):
  --group <name>         Filter to a specific group
  --mods <mods>          Filter to a modifiers string (e.g., "Mod4+Shift")
  --key <keyname>        Filter to a specific key (e.g., "h", "F12")
  --since <days>         Only include items used within the last <days>
  --min-count <n>        Only include items with count >= n
  --max-count <n>        Only include items with count <= n
  --db <path>            Path to DB file (default: ~/.config/awesome/keystats_db.lua)
]])
end

local function parse_args(argv)
  local args = { command = nil, rest = {}, N = nil, filters = {} }
  local i = 1
  while i <= #argv do
    local a = argv[i]
    if a == "--db" then
      args.db = argv[i+1]; i = i + 2
    elseif a == "--group" then
      args.filters.group = argv[i+1]; i = i + 2
    elseif a == "--mods" then
      args.filters.mods = argv[i+1]; i = i + 2
    elseif a == "--key" then
      args.filters.key = argv[i+1]; i = i + 2
    elseif a == "--since" then
      args.filters.since_days = tonumber(argv[i+1]); i = i + 2
    elseif a == "--min-count" then
      args.filters.min_count = tonumber(argv[i+1]); i = i + 2
    elseif a == "--max-count" then
      args.filters.max_count = tonumber(argv[i+1]); i = i + 2
    elseif not args.command then
      args.command = a; i = i + 1
    else
      args.rest[#args.rest+1] = a; i = i + 1
    end
  end
  if #args.rest >= 1 then
    local maybeN = tonumber(args.rest[1])
    if maybeN then args.N = maybeN end
  end
  return args
end

local function human_age(ts)
  ts = tonumber(ts or 0)
  if ts == 0 then return "never" end
  local diff = os.time() - ts
  if diff < 60 then return diff .. "s" end
  if diff < 3600 then return math.floor(diff/60) .. "m" end
  if diff < 86400 then return math.floor(diff/3600) .. "h" end
  return math.floor(diff/86400) .. "d"
end

local function passes_filters(rec, f)
  if f.group and (rec.group or "") ~= f.group then return false end
  if f.mods and (rec.mods or "") ~= f.mods then return false end
  if f.key and (rec.key or "") ~= f.key then return false end
  if f.min_count and (rec.count or 0) < f.min_count then return false end
  if f.max_count and (rec.count or 0) > f.max_count then return false end
  if f.since_days then
    local cutoff = os.time() - (f.since_days * 86400)
    if (rec.last_seen or 0) < cutoff then return false end
  end
  return true
end

local function to_array(db, f)
  local arr = {}
  for id, rec in pairs(db) do
    local mods = rec.mods or ""
    local key = rec.key or ""
    local group = rec.group or ""
    local desc = rec.desc or ""
    local count = rec.count or 0
    local first_seen = tonumber(rec.first_seen or 0)
    local last_seen = tonumber(rec.last_seen or 0)
    local row = {
      id = id,
      mods = mods,
      key = key,
      group = group,
      desc = desc,
      count = count,
      first_seen = first_seen,
      last_seen = last_seen,
    }
    if passes_filters(row, f or {}) then
      arr[#arr+1] = row
    end
  end
  return arr
end

local function print_table(rows)
  -- Determine column widths
  local w_count, w_mods, w_key, w_group = 5, 12, 6, 12
  for _, r in ipairs(rows) do
    w_mods = math.max(w_mods, #(r.mods or ""))
    w_key = math.max(w_key, #(r.key or ""))
    w_group = math.max(w_group, #(r.group or ""))
  end
  local function pad(s, w)
    s = tostring(s)
    if #s >= w then return s end
    return s .. string.rep(" ", w - #s)
  end
  print(pad("count", w_count), pad("mods", w_mods), pad("key", w_key), pad("group", w_group), "last", "desc")
  for _, r in ipairs(rows) do
    print(pad(r.count, w_count), pad(r.mods, w_mods), pad(r.key, w_key), pad(r.group, w_group), pad(human_age(r.last_seen), 5), r.desc or "")
  end
end

local function sort_by(arr, key, desc)
  table.sort(arr, function(a, b)
    if desc then return (a[key] or 0) > (b[key] or 0) else return (a[key] or 0) < (b[key] or 0) end
  end)
end

local function aggregate(arr, by)
  local map = {}
  for _, r in ipairs(arr) do
    local k = r[by] or ""
    local slot = map[k]
    if not slot then
      slot = { key = k, total = 0, items = 0 }
      map[k] = slot
    end
    slot.total = slot.total + (r.count or 0)
    slot.items = slot.items + 1
  end
  local out = {}
  for k, v in pairs(map) do
    out[#out+1] = { key = k, total = v.total, items = v.items }
  end
  table.sort(out, function(a, b) return a.total > b.total end)
  return out
end

local function print_agg(rows, label)
  local w_key = 12
  for _, r in ipairs(rows) do w_key = math.max(w_key, #(r.key or "")) end
  local function pad(s, w) s = tostring(s); if #s >= w then return s end; return s .. string.rep(" ", w - #s) end
  print(pad(label, w_key), pad("total", 8), "items")
  for _, r in ipairs(rows) do
    print(pad(r.key, w_key), pad(r.total, 8), r.items)
  end
end

local function json_escape(s)
  s = tostring(s)
  s = s:gsub('\\', '\\\\')
  s = s:gsub('"', '\\"')
  s = s:gsub('\n', '\\n')
  return s
end

local function to_json(arr)
  local parts = {"["}
  for i, r in ipairs(arr) do
    parts[#parts+1] = string.format('{"id":"%s","mods":"%s","key":"%s","group":"%s","desc":"%s","count":%d,"first_seen":%d,"last_seen":%d}',
      json_escape(r.id or ""), json_escape(r.mods or ""), json_escape(r.key or ""), json_escape(r.group or ""), json_escape(r.desc or ""), r.count or 0, r.first_seen or 0, r.last_seen or 0)
    if i < #arr then parts[#parts+1] = "," end
  end
  parts[#parts+1] = "]"
  return table.concat(parts)
end

local function top_share(rows, K)
  local total = 0
  for _, r in ipairs(rows) do total = total + (r.count or 0) end
  local sorted = {}
  for i, r in ipairs(rows) do sorted[i] = r end
  table.sort(sorted, function(a, b) return (a.count or 0) > (b.count or 0) end)
  local top = 0
  for i = 1, math.min(K, #sorted) do top = top + (sorted[i].count or 0) end
  local share = (total > 0) and (top / total) or 0
  return share, total, sorted
end

local function has_awesome_client()
  -- Portable-ish check
  local ok = os.execute("command -v awesome-client >/dev/null 2>&1")
  -- Lua's os.execute returns true/nil in different versions; normalize
  if ok == true or ok == 0 then return true end
  return false
end

local function run()
  local argv = {}
  for i = 1, #arg do argv[i] = arg[i] end
  if #argv == 0 then usage(); return end
  local args = parse_args(argv)
  local db_path = args.db or (get_config_dir() .. "keystats_db.lua")
  local db = load_db(db_path)

  local cmd = args.command
  local N = args.N or 20
  local rows = to_array(db, args.filters)

  if cmd == "top" then
    sort_by(rows, "count", true)
    if #rows > N then while #rows > N do table.remove(rows) end end
    print_table(rows)

  elseif cmd == "underused" then
    sort_by(rows, "count", false)
    if #rows > N then while #rows > N do table.remove(rows) end end
    print_table(rows)

  elseif cmd == "recent" then
    sort_by(rows, "last_seen", true)
    if #rows > N then while #rows > N do table.remove(rows) end end
    print_table(rows)

  elseif cmd == "stale" then
    sort_by(rows, "last_seen", false)
    if #rows > N then while #rows > N do table.remove(rows) end end
    print_table(rows)

  elseif cmd == "by-group" then
    local agg = aggregate(rows, "group")
    if #agg > N then while #agg > N do table.remove(agg) end end
    print_agg(agg, "group")

  elseif cmd == "by-mods" then
    local agg = aggregate(rows, "mods")
    if #agg > N then while #agg > N do table.remove(agg) end end
    print_agg(agg, "mods")

  elseif cmd == "info" then
    local keyarg = args.rest[1]
    if not keyarg or not keyarg:find("|") then
      print("Provide mods|key, e.g. 'Mod4+Shift|h'")
      return
    end
    local want_mods, want_key = keyarg:match("([^|]+)|(.+)")
    local sub = {}
    for _, r in ipairs(rows) do
      if r.mods == want_mods and r.key == want_key then sub[#sub+1] = r end
    end
    sort_by(sub, "count", true)
    print_table(sub)

  elseif cmd == "search" then
    local q = (args.rest[1] or ""):lower()
    local sub = {}
    for _, r in ipairs(rows) do
      local hay = table.concat({r.desc or "", r.group or "", r.key or "", r.mods or ""}, " "):lower()
      if hay:find(q, 1, true) then sub[#sub+1] = r end
    end
    sort_by(sub, "count", true)
    print_table(sub)

  elseif cmd == "export" then
    local fmt = (args.rest[1] or "json"):lower()
    if fmt == "json" then
      io.write(to_json(rows), "\n")
    else
      -- Lua table format for scripting in Lua
      print("return ")
      print("{")
      for _, r in ipairs(rows) do
        print(string.format("  { id=%q, mods=%q, key=%q, group=%q, desc=%q, count=%d, first_seen=%d, last_seen=%d },",
          r.id or "", r.mods or "", r.key or "", r.group or "", r.desc or "", r.count or 0, r.first_seen or 0, r.last_seen or 0))
      end
      print("}")
    end

  elseif cmd == "concentration" then
    local K = args.N or 10
    local share, total, sorted = top_share(rows, K)
    io.write(string.format("Top %d concentration: %.1f%% of %d total\n", K, share * 100.0, total))
    -- Also print the top K table from the sorted copy
    local topK = {}
    for i = 1, math.min(K, #sorted) do topK[i] = sorted[i] end
    print_table(topK)

  elseif cmd == "notify-top" then
    local N = args.N or 10
    if has_awesome_client() then
      local cmd = string.format("awesome-client 'pcall(function() require(\\"plugins.keystats\\").notify_top(%d) end)'", N)
      os.execute(cmd)
    else
      io.stderr:write("awesome-client not found in PATH. Run within Awesome via: \n")
      io.stderr:write(string.format("  awesome-client 'require(\\"plugins.keystats\\").notify_top(%d)'\n", N))
    end

  else
    usage()
  end
end

run()
